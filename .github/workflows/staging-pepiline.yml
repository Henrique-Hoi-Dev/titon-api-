name: CI/CD Staging

on:
    pull_request:
        branches: [staging, master]
    push:
        branches: [staging, master]

env:
    NODE_VERSION: 20.12.2
    DATABASE_URL_DB: ${{ secrets.DATABASE_URL_DB }}
    DB_USER: ${{ secrets.DB_USER }}
    DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
    DB_NAME: ${{ secrets.DB_NAME }}
    DB_PORT: ${{ secrets.DB_PORT }}
    DB_HOST: ${{ secrets.DB_HOST }}

jobs:
    lint:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@v3
              with:
                  node-version: ${{ env.NODE_VERSION }}
            - run: yarn install --frozen-lockfile
            - run: yarn lint

    style:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@v3
              with:
                  node-version: ${{ env.NODE_VERSION }}
            - run: yarn install --frozen-lockfile
            - run: yarn style:check

    test:
        runs-on: ubuntu-latest
        services:
            postgres:
                image: postgres:16
                env:
                    POSTGRES_USER: ${{ env.DB_USER }}
                    POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
                    POSTGRES_DB: ${{ env.DB_NAME }}
                ports:
                    - 5432:5432
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
        env:
            DATABASE_URL_DB: postgres://${{ env.DB_USER }}:${{ env.DB_PASSWORD }}@localhost:${{ env.DB_PORT }}/test
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@v3
              with:
                  node-version: ${{ env.NODE_VERSION }}
            - run: yarn install --frozen-lockfile
            - run: yarn coverage

    check-code-quality:
        runs-on: ubuntu-latest
        needs: [lint, style, test]
        steps:
            - run: echo "‚úîÔ∏è C√≥digo validado com sucesso"

    deploy:
        needs: check-code-quality
        if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repo
              uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Install dependencies
              run: yarn install --frozen-lockfile

            - name: Deploy to Staging
              run: |
                  echo "üöÄ Fazendo deploy para staging..."
                  # yarn deploy:staging ‚Üê substitua por seu comando real
